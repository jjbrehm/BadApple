CHANGELOG

# Version 1.0: reproduced the functionality of the APL code in the appendix
#   to WSS

# Version 1.1b1: modifications (3 july 2020)
#  goals for this version are to
#   x Change "Results" to "ExecSummary"
#   x and return as an object;
#     e.g., wss$ExecSummary will be the equivalent to v1.0
#   x Record Performance of each bureaucrat over each iteration
#   x Output Performance as a separate object
#   x Record Obsty for each iteration in ObstyRecord
#   x Output ObstyRecord as object
#   x Record Seen for each iteration as SeenRecord
#   x Output SeenRecord as object
#   x Directly implement variations from WSS for punishment by (x) standard,
#     (x) positive predispositions only, and (x) omniscience
#   ! Create entry point for utility modification (FOR THE NEXT VERSION)
#   ! Debug the old_analyze code (GAVE UP)
#   x Allow to intervene with settings for parameters
#   x Changed code to refer to Replications instead of Trials
#     Replications is a more commonly used term in computational models, as in
#     the number of times a particular experiment is replicated.
#     So Replications are the number of times that we try a simulation, and
#     a simulation runs over so many iterations.
#   x Renamed the main function to "ImitSim" (was "BigLoop1a", which is very
#     nondescriptive)

# Version 1.1b2: debugging (6 july 2020)
#   x Checked sign on Punishment (ok)
#   x Checked Tolerance and Std (FIXED)
#   x Checked connectivity as function low mean observability (ok)
#   x Check that envy is working correctly (ok) -- UPDATE: see 1.1b3, probably NOT WORKING.
#   x Check that bureaucrats are adapting behavior on basis of observed utility (ok)
#   x Check that supervisor is assigning puhishment to the deviants she sees (ok)

# Version 1.1b3: debugging (11 july 2020)
#   x Wrote an igraph version of plot_bgraph(simobj, repl) which creates a "plot"-able
#     object than can be converted in to a matrix of up to 4x4 n-graph plots
#   x Wrote a ggraph version of plot_ibgraph(simobj, repl), which produces a ggraph,
#     not tested yet if it is combiinable
#   x Added an option to write a new, tall matrix, TallPerformance:
#     (Replication, Iteration, Connectivity, Worker, Performance)
#   x Wrote a simple function to plot_performance(simobj), which plots the
#     performance of every bureaucrat over iteration (replications *and* bureaucrats as separate lines);
#     some ugliness about the plots: why the vertical bars at each point?
#       FIXED: set group=interaction(Replication, Bureaucrat) to get sep lines for each bcrat and repl
#   ! Wrote rearranger.R,
#     NOT sure there isn't a bug in the script
#   x Discovered several new concerns about how learning is operating, probably traceable to the
#     creation of the Envy variable in ImitSim.
#       -> Not clear that the "Envy"ied bureaucrat is the highest utility _seen_
#       -> How else would it be possible that isolated bureaucrats would envy anyone?
#          (I.e., run ImitSim(1000, BurObsParms=c(0,0)))
#       FIXED: set unobserved to NA, not 0, so BurUtilSeen of the inviisible bureaucrat is 0

#    ! Still to check: performance of model under the WSS conditions (posprefs, fixed supervision, omnniscient super)

# Version 1.1: finalized this stage. On to the actual "Bad Apple" model next.

# Version 2.0b1: beginning the BadApple function within the BadApple project
#    x Define Saboteur parameters (NumSaboteurs, SabBurObsParms, SabPrefParms, SabRespParms,
#       SabObsParms, SabPunishment)
#    x Define and use SabObsty, SabPrefs, SabResponses
#    x Running initial tests on the model (NumSaboteurs = 1, 3, 5; same [draw Prefs and Responses a second time from
#      same density]; bad_prefs (NumSaboteurs = 1, 3, 5); bad_responses (NumSaboterus = 1, 3, 5); both bad)
#    x Running initial tests on the model (NumSaboteurs = 1, 3, 5; same [draw Prefs and Responses a second time from
#      same density]; bad_prefs (NumSaboteurs = 1, 3, 5); bad_responses (NumSaboterus = 1, 3, 5); both bad)
#    - Define and use SabSupObsty
#    - Define and use SabPunishment
#    - Running initial tests on the model (NumSaboteurs = 1, 3, 5; same [draw Prefs and Responses a second time from
#      same density]; bad_prefs (NumSaboteurs = 1, 3, 5); bad_responses (NumSaboterus = 1, 3, 5); both bad)
